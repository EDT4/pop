import Mathlib.CategoryTheory.Adjunction.Basic
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.Tactic.ApplyFun

open CategoryTheory

variable {C‚ÇÅ : Type _} [Category C‚ÇÅ]
variable {C‚ÇÇ : Type _} [Category C‚ÇÇ]

namespace CategoryTheory.Adjunction.CoreEtaInvertibleHom
  variable {L : C‚ÇÅ ‚•§ C‚ÇÇ}
  variable {R : C‚ÇÇ ‚•§ C‚ÇÅ}
  variable (Œ∑ : ùü≠ C‚ÇÅ ‚ü∂ L ‚ãô R)

  abbrev hom {c‚ÇÅ : C‚ÇÅ} {c‚ÇÇ : C‚ÇÇ} : (L.obj c‚ÇÅ ‚ü∂ c‚ÇÇ) ‚Üí (c‚ÇÅ ‚ü∂ R.obj c‚ÇÇ)
    := fun f => Œ∑.app c‚ÇÅ ‚â´ R.map f

  -- Note: The assumptions here are what would be the definition of an "IsEquiv" if it would exist. A definition similar to `Mathlib.Logic.Equiv.Defs.Equiv` but with a parameter for the function similar to `Function.Bijective`.
  def mk
    (invHom : ‚àÄ{c‚ÇÅ : C‚ÇÅ}{c‚ÇÇ : C‚ÇÇ}, (c‚ÇÅ ‚ü∂ R.obj c‚ÇÇ) ‚Üí (L.obj c‚ÇÅ ‚ü∂ c‚ÇÇ))
    (left_inv  : ‚àÄ{c‚ÇÅ}{c‚ÇÇ}, Function.LeftInverse  invHom (hom Œ∑ (c‚ÇÅ := c‚ÇÅ) (c‚ÇÇ := c‚ÇÇ)))
    (right_inv : ‚àÄ{c‚ÇÅ}{c‚ÇÇ}, Function.RightInverse invHom (hom Œ∑ (c‚ÇÅ := c‚ÇÅ) (c‚ÇÇ := c‚ÇÇ)))
    : L ‚ä£ R
    :=
      Adjunction.mkOfHomEquiv {
        homEquiv := fun _ _ => .mk (hom Œ∑) invHom left_inv right_inv
        homEquiv_naturality_left_symm := by
          intro c‚ÇÅ‚ÇÅ c‚ÇÅ‚ÇÇ c‚ÇÇ f g
          simp
          apply_fun hom Œ∑
          . rw [right_inv]
            simp [hom]
            rewrite [‚Üê Category.assoc , ‚Üê Functor.comp_map , ‚Üê Œ∑.naturality f]
            simp
            congr
            change g = hom Œ∑ (invHom g)
            rw [right_inv]
          . exact Function.LeftInverse.injective left_inv
        homEquiv_naturality_right := by simp [hom]
      }

  noncomputable def mkBijective (bij : ‚àÄ{c‚ÇÅ}{c‚ÇÇ}, Function.Bijective (hom Œ∑ (c‚ÇÅ := c‚ÇÅ) (c‚ÇÇ := c‚ÇÇ))) : L ‚ä£ R :=
    let e {c‚ÇÅ}{c‚ÇÇ} := Equiv.ofBijective (hom Œ∑ (c‚ÇÅ := c‚ÇÅ) (c‚ÇÇ := c‚ÇÇ)) bij
    mk Œ∑ e.invFun e.left_inv e.right_inv

end CategoryTheory.Adjunction.CoreEtaInvertibleHom

noncomputable def CategoryTheory.Adjunction.CoreFullyFaithfulEpiIsoRight.mk
  (L : C‚ÇÅ ‚•§ C‚ÇÇ)
  (R : C‚ÇÇ ‚•§ C‚ÇÅ)
  [fu : R.Full]
  [ff : R.Faithful]
  (Œ∑ : ùü≠ C‚ÇÅ ‚ü∂ L ‚ãô R)
  [epi : ‚àÄ{c}, Epi (Œ∑.app c)]
  [iso : ‚àÄ(d : C‚ÇÇ), IsIso (Œ∑.app (R.obj d))]
  : L ‚ä£ R :=
  let Œµ := {
    app d := R.preimage (inv (Œ∑.app (R.obj d)))
    naturality := by
      intro X Y f
      simp_all
      apply_fun R.map
      . simp only [Functor.map_comp, Functor.map_preimage, IsIso.eq_inv_comp, ‚Üê Category.assoc, IsIso.comp_inv_eq]
        apply (Eq.trans ¬∑ (Œ∑.naturality (R.map f)).symm)
        apply congr_arg (Œ∑.app (R.obj X) ‚â´ ¬∑)
        simp only [Functor.comp_obj, Functor.comp_map]
      . exact ff.map_injective
  }
  {
    unit := Œ∑
    counit := Œµ
    left_triangle_components := by
      intro c
      simp only [Functor.id_obj, Functor.comp_obj]
      apply_fun R.map
      . simp only [Functor.map_comp, Functor.map_preimage, Functor.map_id, IsIso.comp_inv_eq, Category.id_comp, Œµ]
        apply_fun (Œ∑.app c ‚â´ ¬∑)
        . exact (Œ∑.naturality (Œ∑.app c)).symm
        . exact Epi.left_cancellation
      . exact ff.map_injective
    right_triangle_components := by simp only [Functor.id_obj, Functor.map_preimage, IsIso.hom_inv_id, implies_true, Œµ]
  }
