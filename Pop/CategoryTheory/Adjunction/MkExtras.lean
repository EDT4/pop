import Mathlib.CategoryTheory.Adjunction.Basic
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.Tactic.ApplyFun

open CategoryTheory

namespace CategoryTheory.Adjunction.CoreEtaInvertibleHom
  variable {C‚ÇÅ C‚ÇÇ : Type _}
  variable [Category C‚ÇÅ]
  variable [Category C‚ÇÇ]
  variable {L : Functor C‚ÇÅ C‚ÇÇ}
  variable {R : Functor C‚ÇÇ C‚ÇÅ}
  variable (Œ∑ : ùü≠ C‚ÇÅ ‚ü∂ L ‚ãô R)

  abbrev hom {c‚ÇÅ : C‚ÇÅ} {c‚ÇÇ : C‚ÇÇ} : (L.obj c‚ÇÅ ‚ü∂ c‚ÇÇ) ‚Üí (c‚ÇÅ ‚ü∂ R.obj c‚ÇÇ)
    := fun f => Œ∑.app c‚ÇÅ ‚â´ R.map f

  def mk
    -- TODO: So, to construct such an invHom: let L, R be fully faithful, but the functors are not bijective? So...
    -- TODO: The assumptions here is Function.Bijective but using inverses and Mathlib.Logic.Equiv.Defs.Equiv but with a parameter. There is no "IsEquiv"?
    (invHom : ‚àÄ{c‚ÇÅ : C‚ÇÅ}{c‚ÇÇ : C‚ÇÇ}, (c‚ÇÅ ‚ü∂ R.obj c‚ÇÇ) ‚Üí (L.obj c‚ÇÅ ‚ü∂ c‚ÇÇ))
    (left_inv  : ‚àÄ{c‚ÇÅ}{c‚ÇÇ}, Function.LeftInverse  invHom (hom Œ∑ (c‚ÇÅ := c‚ÇÅ) (c‚ÇÇ := c‚ÇÇ)))
    (right_inv : ‚àÄ{c‚ÇÅ}{c‚ÇÇ}, Function.RightInverse invHom (hom Œ∑ (c‚ÇÅ := c‚ÇÅ) (c‚ÇÇ := c‚ÇÇ)))
    : L ‚ä£ R
    :=
      Adjunction.mkOfHomEquiv {
        homEquiv := fun _ _ => .mk (hom Œ∑) invHom left_inv right_inv
        homEquiv_naturality_left_symm := by
          intro c‚ÇÅ‚ÇÅ c‚ÇÅ‚ÇÇ c‚ÇÇ f g
          simp
          apply_fun hom Œ∑
          . rw [right_inv]
            simp [hom]
            rewrite [‚Üê Category.assoc , ‚Üê Functor.comp_map , ‚Üê Œ∑.naturality f]
            simp
            congr
            change g = hom Œ∑ (invHom g)
            rw [right_inv]
          . exact Function.LeftInverse.injective left_inv
        homEquiv_naturality_right := by simp [hom]
      }

  -- TODO: temporary
  noncomputable def mkBijective (bij : ‚àÄ{c‚ÇÅ}{c‚ÇÇ}, Function.Bijective (hom Œ∑ (c‚ÇÅ := c‚ÇÅ) (c‚ÇÇ := c‚ÇÇ))) : L ‚ä£ R :=
    let e {c‚ÇÅ}{c‚ÇÇ} := Equiv.ofBijective (hom Œ∑ (c‚ÇÅ := c‚ÇÅ) (c‚ÇÇ := c‚ÇÇ)) bij
    mk Œ∑ e.invFun e.left_inv e.right_inv
end Adjunction.CoreEtaInvertibleHom
